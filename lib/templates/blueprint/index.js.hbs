/**
 * Server root
 *
 * Collects all routes and starts the server
 */
require('./evilGlobalVariables');

const glob = require('glob-promise');
const express = require('express');
const { partial } = require('lodash');
const bodyParser = require('body-parser');
const wrapCatch = require('express-catch');
{{#if configuration.mongodb}}const { MongoClient } = require('mongodb');{{/if}}
{{#if configuration.redis}}const Redis = require('ioredis');{{/if}}
{{#if configuration.postgres}}const pgPromise = require('pg-promise'){{/if}}
const { info, error } = require('./src/services/log');
const config = require('./src/services/config');

const server = express();
const router = wrapCatch(server);

/* Setup the application server */
server.use(bodyParser.json());

/* Building blocks */
const findRoutes = partial(glob, './src/routes/**/*.js');
const findMiddlewares = partial(glob, './src/middlewares/**/*.js');
const requireAndIntegrate = function(files, app) {
    files.forEach(file => {
        const fn = require(file);

        if ('function' === typeof fn) fn(app);
    });
};

const filterJsAndSort = function(files) {
    return files.filter(file => file.endsWith('.js')).sort();
};

/* Start âœ¨ */
info('Starting up...');
findMiddlewares()
    .then(middlewares => {
        requireAndIntegrate(filterJsAndSort(middlewares), server);
        return findRoutes();
    })
    .then(routes => {
        requireAndIntegrate(filterJsAndSort(routes), router);
    })
    {{#if configuration.mongodb}}
    .then(function() {
        /*
         * mongodb connection is accessible using req.app.get('mongodb')
         */
        info('Connecting to mongodb...');
        return MongoClient.connect(config.mongodb).then(db =>
            server.set('mongodb', db)
        );
    })
    {{/if}}
    {{#if configuration.redis}}
    .then(function() {
        /*
         * Redis connection is accessible using req.app.get('redis')
         */
        info('Connecting to Redis...');
        server.set('redis', new Redis(config.redis));
    })
    {{/if}}
    {{#if configuration.postgres}}
    .then(function() {
        /*
         * PostgreSQL connection is accessible using req.app.get('postgres')
         */
        info('Connecting to PostgreSQL...');
        const pgp = pgPromise(config.pgPromiseOptions);
        const db = pgp(config.postgres);
        server.set('postgres', db);
    })
    {{/if}}
    .then(function() {
        info('Going to listen on %s:%s', config.host, config.port);
        server.listen(config.port, config.host);
    })
    .catch(reason => {
        error('Failed to start the server', reason);
    });
